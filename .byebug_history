continue
cleaned_pairs.first
continue
RockPaperScissors::VALUES[Choice.find("B")]
continue
"B" == "A" || "B" == "X"
Choice.find("B")
RockPaperScissors::VALUES[Choice.find("B")]
ue)]
RockPaperScissors::VALUES[Choice.find([1;2D")]
continue
cleaned_pairs.first.split
score
continue
cleaned_pairs.first.split.first
Game.new.match(something[0], something[1])
cleaned_pairs.tally.map { |choice| choice[0] }
Game.new.match(something[0], something[1])
something
cleaned_pairs.first
Choice.new.determine("A")
continue
Choice.new.determine("A")
continue
Game.new.match(:paper, :scissors)
continue
Game.new.match(:paper, :rock)
continue
Game::VALUE[:rock] > Game::VALUE[:scissors]
Game::VALUE(:rock)
continue
cleaned_pairs.map { |pair| pair[2] }.tally["Z"]*3
pairs
continue
Choice::SHAPE
cleaned_pairs.first.split.map(&:to_sym).each do |sym|; p ::Opponent::SHAPE[sym]; p ::Choice::SHAPE[sym]; end
Opponent::SHAPE[:A]
continue
pairs.first.first.strip
pairs.first
b = input.each_slice(1).to_a
input.map(&:to_i)
input
continue
]
[100, 200, 300, "
    ]
      10000
      9000,
      8000,
      7000,
      6000,
      5000,
      4000,
      3000,
      2000,
      1000,
[
